/**************************  Driver层相关句柄初始化示例  **************************/


/* 串口句柄示例 */
tagUART_T demoUart = 
{
	//串口工作模式配置
	.tUARTHandle.Instance 						= USART1,					/* STM32 串口设备 */
	.tUARTHandle.Init.BaudRate   				= 115200,					/* 串口波特率 */
	.tUARTHandle.Init.WordLength 				= UART_WORDLENGTH_8B,		/* 数据位长度 */
	.tUARTHandle.Init.StopBits   				= UART_STOPBITS_1,			/* 停止位长度 */
	.tUARTHandle.Init.Parity     				= UART_PARITY_NONE,			/* 校验位设置 */
	.tUARTHandle.Init.HwFlowCtl  				= UART_HWCONTROL_NONE,		/* 硬件流控设置 */
	.tUARTHandle.Init.Mode       				= UART_MODE_TX_RX,			/* 串口模式 */
	.tUARTHandle.Init.OverSampling 				= UART_OVERSAMPLING_16,		/* 过采样 */

#if defined (STM32L4_SGA_ENABLE)
	.tUARTHandle.Init.OneBitSampling 			= UART_ONE_BIT_SAMPLE_DISABLE,
	.tUARTHandle.AdvancedInit.AdvFeatureInit 	= UART_ADVFEATURE_NO_INIT,
#endif
	
	.ucPriority									= 1,						/* 中断优先级 */
	.ucSubPriority								= 3,						/* 中断子优先级 */
	
	//串口DMA接收参数配置
	.tUartDMA.bRxEnable							= true,						/* DMA接收使能 */
#ifdef STM32F1_SGA_ENABLE
	.tUartDMA.tDMARx.Instance					= DMA1_Channel5,
#endif
#ifdef STM32F4_SGA_ENABLE
	.tUartDMA.tDMARx.Instance					= DMA2_Stream2,
	.tUartDMA.tDMARx.Init.Channel				= DMA_CHANNEL_4,
#endif
	.tUartDMA.tDMARx.Init.Direction				= DMA_PERIPH_TO_MEMORY,
	.tUartDMA.tDMARx.Init.PeriphInc				= DMA_PINC_DISABLE,
	.tUartDMA.tDMARx.Init.MemInc				= DMA_MINC_ENABLE,
	.tUartDMA.tDMARx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE,
	.tUartDMA.tDMARx.Init.MemDataAlignment	  	= DMA_MDATAALIGN_BYTE,
	.tUartDMA.tDMARx.Init.Mode					= DMA_NORMAL,
	.tUartDMA.tDMARx.Init.Priority				= DMA_PRIORITY_LOW,

	.tRxInfo.usDMARxMAXSize             		= 100,              		/* DMA接收缓冲区大小 大小保持在协议最长字节*2以上，确保缓存池一定能够稳定接收一个完整的数据帧*/

	.tUartDMA.ucDMARxPriority					= 1,						/* DMA接收中断优先级 */
	.tUartDMA.ucDMARxSubPriority				= 1,						/* DMA接收中断子优先级 */
	
	//串口DMA发送参数配置
	.tUartDMA.bTxEnable							= true,						/* DMA发送使能 */
#ifdef STM32F1_SGA_ENABLE
	.tUartDMA.tDMATx.Instance					= DMA1_Channel4,
#endif
#ifdef STM32F4_SGA_ENABLE
	.tUartDMA.tDMATx.Instance					= DMA2_Stream7,
	.tUartDMA.tDMATx.Init.Channel				= DMA_CHANNEL_4,
	.tUartDMA.tDMATx.Init.FIFOMode				= DMA_FIFOMODE_ENABLE,
#endif
	.tUartDMA.tDMATx.Init.Direction				= DMA_MEMORY_TO_PERIPH,
	.tUartDMA.tDMATx.Init.PeriphInc				= DMA_PINC_DISABLE,
	.tUartDMA.tDMATx.Init.MemInc				= DMA_MINC_ENABLE,
	.tUartDMA.tDMATx.Init.PeriphDataAlignment	= DMA_PDATAALIGN_BYTE,
	.tUartDMA.tDMATx.Init.MemDataAlignment		= DMA_MDATAALIGN_BYTE,
	.tUartDMA.tDMATx.Init.Mode					= DMA_NORMAL,
	.tUartDMA.tDMATx.Init.Priority				= DMA_PRIORITY_HIGH,

	.tTxInfo.usDMATxMAXSize						= 50,						/* DMA发送缓冲区大小 */
	
	.tUartDMA.ucDMATxPriority					= 1,						/* DMA发送中断优先级 */
	.tUartDMA.ucDMATxSubPriority				= 1,						/* DMA发送中断子优先级 */

	//串口GPIO配置
	.tGPIO[0].tGPIOInit.Pin 					= GPIO_PIN_9,				/* GPIO引脚 */
	.tGPIO[0].tGPIOInit.Mode 					= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tGPIO[0].tGPIOInit.Pull 					= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tGPIO[0].tGPIOInit.Speed 					= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tGPIO[0].tGPIOPort 						= GPIOA,					/* GPIO分组 */
#ifdef STM32F1_SGA_ENABLE
	.tGPIO[0].ucAFMode							= NO_REMAP,					/* GPIO重映射 */
#endif
#ifdef STM32F4_SGA_ENABLE
	.tGPIO[0].tGPIOInit.Alternate				= GPIO_AF7_USART1,
#endif

	.tGPIO[1].tGPIOInit.Pin 					= GPIO_PIN_10,				/* GPIO引脚 */
	.tGPIO[1].tGPIOInit.Pull 					= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tGPIO[1].tGPIOInit.Speed 					= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tGPIO[1].tGPIOPort 						= GPIOA,					/* GPIO分组 */
#ifdef STM32F1_SGA_ENABLE	
	.tGPIO[1].tGPIOInit.Mode 					= GPIO_MODE_INPUT,			/* F4系列需要设置为输入模式 */
	.tGPIO[1].ucAFMode							= NO_REMAP,					/* GPIO重映射 */
#endif
#ifdef STM32F4_SGA_ENABLE
	.tGPIO[1].tGPIOInit.Mode 					= GPIO_MODE_AF_PP,			/* F4系列需要设置为复用推挽 */
	.tGPIO[1].tGPIOInit.Alternate				= GPIO_AF7_USART1,
#endif
};

/* GPIO句柄示例 */
tagGPIO_T demoGPIO[3] =
{
	/* LED红灯 */
	[0]=
	{ 
		.tGPIOInit.Pin 		= GPIO_PIN_13,				/* GPIO引脚 */
		.tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
		.tGPIOInit.Pull 	= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
		.tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
		.tGPIOPort 			= GPIOD,					/* GPIO分组 */
	},
	/* LED绿灯 */
	[1]=
	{ 
		.tGPIOInit.Pin 		= GPIO_PIN_14,				/* GPIO引脚 */
		.tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
		.tGPIOInit.Pull 	= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
		.tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
		.tGPIOPort 			= GPIOD,					/* GPIO分组 */
	},
	/* LED蓝灯 */
	[2]=
	{ 
		.tGPIOInit.Pin 		= GPIO_PIN_15,				/* GPIO引脚 */
		.tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
		.tGPIOInit.Pull 	= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
		.tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
		.tGPIOPort 			= GPIOD,					/* GPIO分组 */
	},
};

/* SPI资源结构体示例 */
tagSPI_T demoSPI = 
{
	.tSPIHandle.Instance 				= SPI2,
	.tSPIHandle.Init.Mode 				= SPI_MODE_MASTER,
	.tSPIHandle.Init.Direction 			= SPI_DIRECTION_2LINES,
	.tSPIHandle.Init.DataSize 			= SPI_DATASIZE_8BIT,
	.tSPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW,
	.tSPIHandle.Init.CLKPhase 			= SPI_PHASE_2EDGE,
	.tSPIHandle.Init.NSS 				= SPI_NSS_SOFT,
	.tSPIHandle.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_256,
	.tSPIHandle.Init.FirstBit 			= SPI_FIRSTBIT_MSB,
	.tSPIHandle.Init.TIMode 			= SPI_TIMODE_DISABLE,
	.tSPIHandle.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE,
	.tSPIHandle.Init.CRCPolynomial 		= 7,	
#if defined (STM32L4_SGA_ENABLE)
	.tSPIHandle.Init.CRCLength 			= SPI_CRC_LENGTH_DATASIZE,
	.tSPIHandle.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE,	
#endif
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    .tGPIO[0].tGPIOInit.Pin				= GPIO_PIN_13,
	.tGPIO[0].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,
	.tGPIO[0].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,
	.tGPIO[0].tGPIOPort					= GPIOB,
	.tGPIO[0].ucAFMode					= NO_REMAP,

	.tGPIO[1].tGPIOInit.Pin 			= GPIO_PIN_14,
	.tGPIO[1].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,
	.tGPIO[1].tGPIOInit.Pull 			= GPIO_NOPULL,
	.tGPIO[1].tGPIOPort					= GPIOB,
	.tGPIO[1].ucAFMode					= NO_REMAP,

	.tGPIO[2].tGPIOInit.Pin				= GPIO_PIN_15,
	.tGPIO[2].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,
	.tGPIO[2].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,
	.tGPIO[2].tGPIOPort					= GPIOB,
	.tGPIO[2].ucAFMode					= NO_REMAP,

};

/* IIC资源结构体示例 */
tagIICSoft_T demoIIC = 
{
	/* SCL线 */
	.tIICSoft[0].tGPIOInit.Pin 			= GPIO_PIN_5,				/* GPIO引脚 */
	.tIICSoft[0].tGPIOInit.Mode 		= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
	.tIICSoft[0].tGPIOInit.Pull 		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIICSoft[0].tGPIOInit.Speed 		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIICSoft[0].tGPIOPort 				= GPIOE,					/* GPIO分组 */
	
	/* SDA线 */
	.tIICSoft[1].tGPIOInit.Pin 			= GPIO_PIN_3,				/* GPIO引脚 */
	.tIICSoft[1].tGPIOInit.Mode 		= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tIICSoft[1].tGPIOInit.Pull 		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIICSoft[1].tGPIOInit.Speed 		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIICSoft[1].tGPIOPort 				= GPIOE,					/* GPIO分组 */
};

/* 定时器Timer资源结构体示例 */
tagTIM_T tTimer = 
{
	.tTimerHandle.Instance				= TIM6,						/* 定时器6 */
	.fTimingLength						= 100,						/* 定时时长(单位ms) */

	.ucPriority							= 2,						/* 中断优先级 */
	.ucSubPriority						= 2,						/* 中断子优先级 */
};

/* 软件SPI资源结构体示例 */
tagSPISoft_T SPI_soft[2] =
{
	[0]=
	{
	/**SPI Soft GPIO Configuration
    PE2     ------> SPI_SCK
	PE4     ------> SPI_MISO
    PE3     ------> SPI_MOSI
	PE1     ------> SPI_NSS 
    */
	.tSPISoft[0].tGPIOInit.Pin		= GPIO_PIN_2,
	.tSPISoft[0].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
	.tSPISoft[0].tGPIOInit.Pull 	= GPIO_PULLUP,
	.tSPISoft[0].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
	.tSPISoft[0].tGPIOPort			= GPIOE,
	.tSPISoft[0].ucAFMode			= NO_REMAP,
	
	.tSPISoft[1].tGPIOInit.Pin		= GPIO_PIN_4,
	.tSPISoft[1].tGPIOInit.Mode 	= GPIO_MODE_INPUT,
	.tSPISoft[1].tGPIOInit.Pull 	= GPIO_PULLUP,
	.tSPISoft[1].tGPIOPort			= GPIOE,
	.tSPISoft[1].ucAFMode			= NO_REMAP,
	
	.tSPISoft[2].tGPIOInit.Pin		= GPIO_PIN_3,
	.tSPISoft[2].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
	.tSPISoft[2].tGPIOInit.Pull 	= GPIO_PULLUP,
	.tSPISoft[2].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
	.tSPISoft[2].tGPIOPort			= GPIOE,
	.tSPISoft[2].ucAFMode			= NO_REMAP,
	
	.tSPISoft[3].tGPIOInit.Pin		= GPIO_PIN_1,
	.tSPISoft[3].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
	.tSPISoft[3].tGPIOInit.Pull 	= GPIO_PULLUP,
	.tSPISoft[3].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
	.tSPISoft[3].tGPIOPort			= GPIOE,
	.tSPISoft[3].ucAFMode			= NO_REMAP,
	},
};

/* 独立看门狗示例 */
tagIWDG_T demoIWDG = 
{
	.usResetTime = 1000,			/* 1S喂狗溢出时间 */
};

/* PWM示例 */
tagPWM_T tPWMDemo[] =
{
	[0] =
	{
		.tPWMHandle.Instance	= TIM3,         	/* 定时器3 */
		.fDuty					= 7.5,				/* 初始占空比（%） */
		.ulFreq					= 50,				/* 频率（Hz） */
		.ucChannel				= TIM_CHANNEL_1,	/* 通道 */
		.tGPIO.tGPIOInit.Pin	= GPIO_PIN_6,		/* IO映射 */
		.tGPIO.tGPIOPort		= GPIOA,			/* IO组映射 */
#ifdef STM32F1_SGA_ENABLE
		.tGPIO.ucAFMode			= NO_REMAP,			/* IO重映射模式 */
#endif
	},
};

/* ADC句柄示例 */
tagADC_T demoADC[] = 
{
	[0]=
	{ 
		.tGPIO.tGPIOInit.Pin 					= GPIO_PIN_6,					/* GPIO引脚 */
		.tGPIO.tGPIOInit.Mode 					= GPIO_MODE_ANALOG,				/* GPIO模式 */
		.tGPIO.tGPIOInit.Pull 					= GPIO_NOPULL,					/* GPIO上下拉设置，是否需要上下拉看硬件 */
		.tGPIO.tGPIOInit.Speed 					= GPIO_SPEED_FREQ_HIGH,			/* GPIO速度 */	
		.tGPIO.tGPIOPort 						= GPIOA,						/* GPIO分组 */
		
		.tADCHandle.Instance					= ADC1,
#ifdef STM32F4_SGA_ENABLE
		.tADCHandle.Init.ClockPrescaler			= ADC_CLOCK_SYNC_PCLK_DIV4,		/* 时钟配置 */
#endif
		.tADCHandle.Init.DataAlign				= ADC_DATAALIGN_RIGHT,			/* 右对齐 */
		.tADCHandle.Init.ScanConvMode			= DISABLE,						/* 非扫描模式 */
		.tADCHandle.Init.ContinuousConvMode		= DISABLE,						/* 关闭连续转换 */
		.tADCHandle.Init.NbrOfConversion		= 1,							/* 1个转换在规则序列中 也就是只转换规则序列1 */ 
		.tADCHandle.Init.DiscontinuousConvMode	= DISABLE,						/* 禁止不连续采样模式 */
		.tADCHandle.Init.NbrOfDiscConversion	= 0,							/* 不连续采样通道数为0 */
		.tADCHandle.Init.ExternalTrigConv		= ADC_SOFTWARE_START,			/* 软件触发 */
		
		.tADCChannel.Channel					= ADC_CHANNEL_6,				/* 通道 */
		.tADCChannel.Rank						= 1,							/* 第1个序列，序列1 */
#ifdef STM32F1_SGA_ENABLE
		.tADCChannel.SamplingTime				= ADC_SAMPLETIME_239CYCLES_5,	/* 采样时间 */
#endif
#ifdef STM32F4_SGA_ENABLE
		.tADCChannel.SamplingTime				= ADC_SAMPLETIME_3CYCLES,		/* 采样时间 */
#endif
		.ucAverageNum							= 10,							/* 均值滤波均值数 */
	},
};

/* DAC句柄示例 */
tagDAC_T demoDAC[] = 
{
	/* 通道1配置，PA4 */
	[0] =
	{
		.ulDACChannelSelect 			= DAC_CHANNEL_1,
		.tDACChannel.DAC_Trigger 		= DAC_TRIGGER_NONE,
		.tDACChannel.DAC_OutputBuffer 	= DAC_OUTPUTBUFFER_DISABLE,
	},
	/* 通道2配置，PA5 */
	[1] =
	{
		.ulDACChannelSelect 			= DAC_CHANNEL_2,
		.tDACChannel.DAC_Trigger 		= DAC_TRIGGER_NONE,
		.tDACChannel.DAC_OutputBuffer 	= DAC_OUTPUTBUFFER_DISABLE,
	},
};

/* CAN句柄示例 */
tagCAN_T CAN =
{
	/* CAN配置 */
	.tCANHandle.Instance 								= CAN1,
	.tCANHandle.Init.Mode 								= CAN_MODE_LOOPBACK,			/* 模式设置 */

#ifdef STM32F1_SGA_ENABLE	//F1系列500Kbps举例
	.tCANHandle.Init.Prescaler 							= 6,							/* 分频系数 */
	.tCANHandle.Init.SyncJumpWidth 						= CAN_SJW_1TQ,					/* 重新同步跳跃宽度 */
	.tCANHandle.Init.TimeSeg1 							= CAN_BS1_10TQ,					/* Tbs1 */
	.tCANHandle.Init.TimeSeg2 							= CAN_BS2_1TQ,					/* Tbs2 */
#endif
	
#ifdef STM32F4_SGA_ENABLE	//F4系列500Kbps举例
	.tCANHandle.Init.Prescaler 							= 7,							/* 分频系数 */
	.tCANHandle.Init.SyncJumpWidth 						= CAN_SJW_1TQ,					/* 重新同步跳跃宽度 */
	.tCANHandle.Init.TimeSeg1 							= CAN_BS1_10TQ,					/* Tbs1 */
	.tCANHandle.Init.TimeSeg2 							= CAN_BS2_1TQ,					/* Tbs2 */
#endif
	.tCANHandle.Init.TimeTriggeredMode 					= DISABLE,						/* 非时间触发通信模式 */
	.tCANHandle.Init.AutoBusOff 						= DISABLE,						/* 软件自动离线管理 */
	.tCANHandle.Init.AutoRetransmission 				= DISABLE,						/* 睡眠模式通过软件唤醒 */
	.tCANHandle.Init.AutoWakeUp 						= DISABLE,						/* 禁止报文自动传送 */
	.tCANHandle.Init.ReceiveFifoLocked 					= DISABLE,						/* 报文不锁定,新的覆盖旧的 */
	.tCANHandle.Init.TransmitFifoPriority 				= DISABLE,						/* 优先级由报文标识符决定 */

	/* CAN过滤器配置 */
	.ucCANFilterNum										= 2,							/* 需要配置过滤器个数 */

	.tCANFilter[0].FilterBank 							= 0,							/* 过滤器0 */
	.tCANFilter[0].FilterMode 							= CAN_FILTERMODE_IDLIST,		/* 过滤器模式 */
	.tCANFilter[0].FilterScale 							= CAN_FILTERSCALE_32BIT,		/* 过滤器位数 */
	.tCANFilter[0].FilterIdHigh 						= 0x55 << 5,		//0x55通过
	.tCANFilter[0].FilterIdLow 							= 0x00,
	.tCANFilter[0].FilterMaskIdHigh 					= 0xffff,			//掩码全通过
	.tCANFilter[0].FilterMaskIdLow 						= 0|0x02,			//只收数据帧
	.tCANFilter[0].FilterFIFOAssignment 				= CAN_RX_FIFO0,					/* 过滤器关联到FIFO0 */
	.tCANFilter[0].FilterActivation 					= ENABLE,						/* 激活过滤器0 */
	.tCANFilter[0].SlaveStartFilterBank 				= 14,							/* 从CAN过滤器起始 */

	.tCANFilter[1].FilterBank 							= 1,							/* 过滤器1 */
	.tCANFilter[1].FilterMode 							= CAN_FILTERMODE_IDMASK,		/* 过滤器模式 */
	.tCANFilter[1].FilterScale 							= CAN_FILTERSCALE_32BIT,		/* 过滤器位数 */
	.tCANFilter[1].FilterIdHigh 						= 0x55 << 5,		//0x55通过
	.tCANFilter[1].FilterIdLow 							= 0x0000,
	.tCANFilter[1].FilterMaskIdHigh 					= 0xffff,			//掩码全通过
	.tCANFilter[1].FilterMaskIdLow 						= 0|0x02,			//只收数据帧
	.tCANFilter[1].FilterFIFOAssignment 				= CAN_RX_FIFO1,					/* 过滤器关联到FIFO1 */
	.tCANFilter[1].FilterActivation 					= ENABLE,						/* 激活过滤器0 */
	.tCANFilter[1].SlaveStartFilterBank 				= 14,							/* 从CAN过滤器起始 */

	/* CAN TX配置 */
	.tCANTxHeader.StdId 								= 0x55,							/* 标准标识符 */
	.tCANTxHeader.ExtId 								= 0x00,							/* 拓展标识符（29位） */
	.tCANTxHeader.IDE 									= CAN_ID_STD,    				/* 使用标准帧 */
	.tCANTxHeader.RTR 									= CAN_RTR_DATA,					/* 数据帧 */
  
	/* CAN 发送优先级 */
	.ucTxPriority										= 9,							/* 发送主优先级 */
	.ucTxSubPriority									= 1,							/* 发送次优先级 */

	/* CAN 接收优先级 */
	.ucRxPriority										= 2,							/* 接收主优先级 */
	.ucRxSubPriority									= 1,							/* 接收次优先级 */
	/* CAN GPIO配置 */
	.tGPIO[0].tGPIOInit.Pin 							= GPIO_PIN_12,					/* GPIO引脚 */
	.tGPIO[0].tGPIOInit.Mode 							= GPIO_MODE_AF_PP,				/* GPIO模式 */
	.tGPIO[0].tGPIOInit.Pull 							= GPIO_PULLUP,					/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tGPIO[0].tGPIOInit.Speed 							= GPIO_SPEED_FREQ_HIGH,			/* GPIO速度 */	
	.tGPIO[0].tGPIOPort 								= GPIOA,						/* GPIO分组 */			

	.tGPIO[1].tGPIOInit.Pin 							= GPIO_PIN_11,					/* GPIO引脚 */
#ifdef STM32F1_SGA_ENABLE
	.tGPIO[1].tGPIOInit.Mode 							= GPIO_MODE_AF_INPUT,			/* GPIO模式 */
#endif
#ifdef STM32F4_SGA_ENABLE
	.tGPIO[1].tGPIOInit.Mode 							= GPIO_MODE_AF_PP,				/* GPIO模式 */
#endif
	.tGPIO[1].tGPIOInit.Pull 							= GPIO_PULLUP,					/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tGPIO[1].tGPIOInit.Speed 							= GPIO_SPEED_FREQ_HIGH,			/* GPIO速度 */	
	.tGPIO[1].tGPIOPort 								= GPIOA,						/* GPIO分组 */			
};


/**************************  BSP层相关句柄初始化示例  **************************/



/* ADS1256句柄示例 */
tagADS1256_T demoADS1256 = 
{
	.tDrdyGPIO.tGPIOInit.Pin 				= GPIO_PIN_9,				/* Drdy  GPIO引脚 */
	.tDrdyGPIO.tGPIOInit.Mode				= GPIO_MODE_INPUT,			/* GPIO模式，上升沿触发 */
	.tDrdyGPIO.tGPIOInit.Pull 				= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tDrdyGPIO.tGPIOInit.Speed 				= GPIO_SPEED_FREQ_LOW,		/* GPIO速度 */	
	.tDrdyGPIO.tGPIOPort 					= GPIOD,					/* GPIO分组 */
	
	.tCsGPIO.tGPIOInit.Pin 					= GPIO_PIN_12,				/* CS  GPIO引脚 */
	.tCsGPIO.tGPIOInit.Mode 				= GPIO_MODE_OUTPUT_PP,		/* GPIO模式，上升沿触发 */
	.tCsGPIO.tGPIOInit.Pull 				= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tCsGPIO.tGPIOInit.Speed 				= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tCsGPIO.tGPIOPort 						= GPIOB,					/* GPIO分组 */
	
	.tSPI.tSPIHandle.Instance 				= SPI2,
	.tSPI.tSPIHandle.Init.Mode 				= SPI_MODE_MASTER,
	.tSPI.tSPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES,
	.tSPI.tSPIHandle.Init.DataSize 			= SPI_DATASIZE_8BIT,
	.tSPI.tSPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW,
	.tSPI.tSPIHandle.Init.CLKPhase 			= SPI_PHASE_2EDGE,
	.tSPI.tSPIHandle.Init.NSS 				= SPI_NSS_SOFT,
	.tSPI.tSPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256,
	.tSPI.tSPIHandle.Init.FirstBit 			= SPI_FIRSTBIT_MSB,
	.tSPI.tSPIHandle.Init.TIMode 			= SPI_TIMODE_DISABLE,
	.tSPI.tSPIHandle.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE,
	.tSPI.tSPIHandle.Init.CRCPolynomial 	= 7,	
#if defined (STM32L4_SGA_ENABLE)
	.tSPI.tSPIHandle.Init.CRCLength 		= SPI_CRC_LENGTH_DATASIZE,
	.tSPI.tSPIHandle.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE,	
#endif

	.tSPI.tGPIO[0].tGPIOInit.Pin 			= GPIO_PIN_13,				/* GPIO引脚 */
	.tSPI.tGPIO[0].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[0].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[0].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[0].tGPIOPort 				= GPIOB,					/* GPIO分组 */
	.tSPI.tGPIO[0].ucAFMode					= NO_REMAP,					/* GPIO重映射 */
	
	.tSPI.tGPIO[1].tGPIOInit.Pin 			= GPIO_PIN_15,				/* GPIO引脚 */
	.tSPI.tGPIO[1].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[1].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[1].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[1].tGPIOPort 				= GPIOB,					/* GPIO分组 */
	.tSPI.tGPIO[1].ucAFMode					= NO_REMAP,					/* GPIO重映射 */
	
	.tSPI.tGPIO[2].tGPIOInit.Pin 			= GPIO_PIN_14,				/* GPIO引脚 */
	.tSPI.tGPIO[2].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[2].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[2].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[2].tGPIOPort 				= GPIOB,					/* GPIO分组 */
	.tSPI.tGPIO[2].ucAFMode					= NO_REMAP,					/* GPIO重映射 */
};

/* DS3231示例 */
tagDS3231_T tDS3231 = 
{
	/* SCL线 */
	.tIICSoft.tIICSoft[0].tGPIOInit.Pin 	= GPIO_PIN_5,				/* GPIO引脚 */
	.tIICSoft.tIICSoft[0].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
	.tIICSoft.tIICSoft[0].tGPIOInit.Pull 	= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIICSoft.tIICSoft[0].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIICSoft.tIICSoft[0].tGPIOPort 		= GPIOE,					/* GPIO分组 */
	
	/* SDA线 */
	.tIICSoft.tIICSoft[1].tGPIOInit.Pin 	= GPIO_PIN_4,				/* GPIO引脚 */
	.tIICSoft.tIICSoft[1].tGPIOInit.Mode 	= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tIICSoft.tIICSoft[1].tGPIOInit.Pull 	= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIICSoft.tIICSoft[1].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIICSoft.tIICSoft[1].tGPIOPort 		= GPIOE,					/* GPIO分组 */
};

/* SD卡，FATFS文件系统示例 */
tagFATFS_T tFATFS = 
{
	.tSPI.tSPIHandle.Instance 				= SPI1,
	.tSPI.tSPIHandle.Init.Mode 				= SPI_MODE_MASTER,
	.tSPI.tSPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES,
	.tSPI.tSPIHandle.Init.DataSize 			= SPI_DATASIZE_8BIT,
	.tSPI.tSPIHandle.Init.CLKPolarity 		= SPI_POLARITY_HIGH,
	.tSPI.tSPIHandle.Init.CLKPhase 			= SPI_PHASE_2EDGE,
	.tSPI.tSPIHandle.Init.NSS 				= SPI_NSS_SOFT,
	.tSPI.tSPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256,
	.tSPI.tSPIHandle.Init.FirstBit 			= SPI_FIRSTBIT_MSB,
	.tSPI.tSPIHandle.Init.TIMode 			= SPI_TIMODE_DISABLE,
	.tSPI.tSPIHandle.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE,
	.tSPI.tSPIHandle.Init.CRCPolynomial 	= 7,	
#if defined (STM32L4_SGA_ENABLE)
	.tSPI.tSPIHandle.Init.CRCLength 		= SPI_CRC_LENGTH_DATASIZE,
	.tSPI.tSPIHandle.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE,	
#endif
	
	.tSPI.tGPIO[0].tGPIOInit.Pin 			= GPIO_PIN_5,				/* GPIO引脚 */
	.tSPI.tGPIO[0].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[0].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[0].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[0].tGPIOPort 				= GPIOA,					/* GPIO分组 */
	
	.tSPI.tGPIO[1].tGPIOInit.Pin 			= GPIO_PIN_7,				/* GPIO引脚 */
	.tSPI.tGPIO[1].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[1].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[1].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[1].tGPIOPort 				= GPIOA,					/* GPIO分组 */
	
	.tSPI.tGPIO[2].tGPIOInit.Pin 			= GPIO_PIN_6,				/* GPIO引脚 */
	.tSPI.tGPIO[2].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tSPI.tGPIO[2].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tSPI.tGPIO[2].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tSPI.tGPIO[2].tGPIOPort 				= GPIOA,					/* GPIO分组 */
};

/* AT24系列示例 */
tagAT24CXX_T tAT24CXX = 
{
	/* SCL线 */
	.tIIC.tIICSoft[0].tGPIOInit.Pin 		= GPIO_PIN_0,				/* GPIO引脚 */
	.tIIC.tIICSoft[0].tGPIOInit.Mode		= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
	.tIIC.tIICSoft[0].tGPIOInit.Pull		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[0].tGPIOInit.Speed		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[0].tGPIOPort 			= GPIOA,					/* GPIO分组 */
	
	/* SDA线 */
	.tIIC.tIICSoft[1].tGPIOInit.Pin 		= GPIO_PIN_1,				/* GPIO引脚 */
	.tIIC.tIICSoft[1].tGPIOInit.Mode		= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tIIC.tIICSoft[1].tGPIOInit.Pull		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[1].tGPIOInit.Speed		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[1].tGPIOPort 			= GPIOA,					/* GPIO分组 */
};

/* OLED示例 */
tagOLED_T tOLED = 
{
	/* SCL线 */
	.tIIC.tIICSoft[0].tGPIOInit.Pin 		= GPIO_PIN_0,				/* GPIO引脚 */
	.tIIC.tIICSoft[0].tGPIOInit.Mode		= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
	.tIIC.tIICSoft[0].tGPIOInit.Pull		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[0].tGPIOInit.Speed		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[0].tGPIOPort 			= GPIOA,					/* GPIO分组 */
	
	/* SDA线 */
	.tIIC.tIICSoft[1].tGPIOInit.Pin 		= GPIO_PIN_1,				/* GPIO引脚 */
	.tIIC.tIICSoft[1].tGPIOInit.Mode		= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tIIC.tIICSoft[1].tGPIOInit.Pull		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[1].tGPIOInit.Speed		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[1].tGPIOPort 			= GPIOA,					/* GPIO分组 */
};

/* PS2手柄示例 */
tagPS2_T PS2 = 
{
	//DI/DAT
	.tGPIO[0].tGPIOInit.Pin 			= GPIO_PIN_1,
	.tGPIO[0].tGPIOInit.Mode 			= GPIO_MODE_INPUT,
	.tGPIO[0].tGPIOInit.Pull 			= GPIO_NOPULL,
	.tGPIO[0].tGPIOPort 				= GPIOB,
	.tGPIO[0].ucAFMode 					= NO_REMAP,

	//DO/CMD
	.tGPIO[1].tGPIOInit.Pin 			= GPIO_PIN_2,
	.tGPIO[1].tGPIOInit.Mode 			= GPIO_MODE_OUTPUT_PP,
	.tGPIO[1].tGPIOInit.Pull 			= GPIO_NOPULL,
	.tGPIO[1].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,
	.tGPIO[1].tGPIOPort 				= GPIOB,
	.tGPIO[1].ucAFMode 					= NO_REMAP,

	//CS
	.tGPIO[2].tGPIOInit.Pin 			= GPIO_PIN_7,
	.tGPIO[2].tGPIOInit.Mode 			= GPIO_MODE_OUTPUT_PP,
	.tGPIO[2].tGPIOInit.Pull 			= GPIO_NOPULL,
	.tGPIO[2].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,
	.tGPIO[2].tGPIOPort 				= GPIOE,
	.tGPIO[2].ucAFMode 					= NO_REMAP,

	//CLK
	.tGPIO[3].tGPIOInit.Pin 			= GPIO_PIN_8,
	.tGPIO[3].tGPIOInit.Mode 			= GPIO_MODE_OUTPUT_PP,
	.tGPIO[3].tGPIOInit.Pull 			= GPIO_NOPULL,
	.tGPIO[3].tGPIOInit.Speed 			= GPIO_SPEED_FREQ_HIGH,
	.tGPIO[3].tGPIOPort 				= GPIOE,
	.tGPIO[3].ucAFMode 					= NO_REMAP,
};

/* JY901S示例 */
tagJY901_T JY901S = 
{
	.tConfig.ucBaud 	= JY901_RXBAUD_9600,
	.tConfig.ucRate		= JY901_RX_1HZ,
	.tConfig.usType		= JY901_OUTPUT_ACCEL | JY901_OUTPUT_GYRO | JY901_OUTPUT_ANGLE | JY901_OUTPUT_MAG,
    .tConfig.ucOrient   = JY901_ORIENT_HORIZONTAL,
    .tConfig.ucAxis     = JY901_AXIS_9,

	.tUART.tUARTHandle.Instance 				= USART2,			/* STM32 串口设备 */
	.tUART.tUARTHandle.Init.BaudRate   			= 9600,				/* 串口波特率 */
	.tUART.tUARTHandle.Init.WordLength 			= UART_WORDLENGTH_8B,
	.tUART.tUARTHandle.Init.StopBits   			= UART_STOPBITS_1,
	.tUART.tUARTHandle.Init.Parity     			= UART_PARITY_NONE,
	.tUART.tUARTHandle.Init.HwFlowCtl  			= UART_HWCONTROL_NONE,
	.tUART.tUARTHandle.Init.Mode       			= UART_MODE_TX_RX,
	.tUART.tUARTHandle.Init.OverSampling 		= UART_OVERSAMPLING_16,

	.tUART.tRxInfo.usDMARxMAXSize             	= 300,                 /* 接收数据长度 长度保持在协议最长字节*2以上，确保缓存池一定能够稳定接收一个完整的数据帧*/

#if defined (STM32L4_SGA_ENABLE)
	.tUARTHandle.Init.OneBitSampling 	= UART_ONE_BIT_SAMPLE_DISABLE,
	.tUARTHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT,
#endif
	
	.tUART.ucPriority							= 1,				/* 中断优先级 */
	.tUART.ucSubPriority						= 3,				/* 中断子优先级 */
	
    .tUART.tUartDMA.bRxEnable					= true,						/* DMA接收使能 */
	.tUART.tUartDMA.tDMARx.Instance					= DMA1_Channel6,
	.tUART.tUartDMA.tDMARx.Init.Direction			= DMA_PERIPH_TO_MEMORY,
	.tUART.tUartDMA.tDMARx.Init.PeriphInc			= DMA_PINC_DISABLE,
	.tUART.tUartDMA.tDMARx.Init.MemInc				= DMA_MINC_ENABLE,
	.tUART.tUartDMA.tDMARx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE,
	.tUART.tUartDMA.tDMARx.Init.MemDataAlignment	= DMA_MDATAALIGN_BYTE,
	.tUART.tUartDMA.tDMARx.Init.Mode				= DMA_CIRCULAR,
	.tUART.tUartDMA.tDMARx.Init.Priority			= DMA_PRIORITY_LOW,

	.tUART.tUartDMA.ucDMARxPriority				= 1,				/* DMA中断优先级 */
	.tUART.tUartDMA.ucDMARxSubPriority			= 1,				/* DMA中断子优先级 */
	
	
	.tUART.tGPIO[0].tGPIOInit.Pin 			= GPIO_PIN_2,				/* GPIO引脚 */
	.tUART.tGPIO[0].tGPIOInit.Mode 			= GPIO_MODE_AF_PP,			/* GPIO模式 */
	.tUART.tGPIO[0].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tUART.tGPIO[0].tGPIOInit.Speed 		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tUART.tGPIO[0].tGPIOPort 				= GPIOA,					/* GPIO分组 */
	.tUART.tGPIO[0].ucAFMode					= NO_REMAP,					/* GPIO重映射 */
	
	.tUART.tGPIO[1].tGPIOInit.Pin 			= GPIO_PIN_3,				/* GPIO引脚 */
	.tUART.tGPIO[1].tGPIOInit.Mode 			= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tUART.tGPIO[1].tGPIOInit.Pull 			= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tUART.tGPIO[1].tGPIOInit.Speed 		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tUART.tGPIO[1].tGPIOPort 				= GPIOA,					/* GPIO分组 */
	.tUART.tGPIO[1].ucAFMode					= NO_REMAP,					/* GPIO重映射 */
};

/* RM3100示例 */
tagRM3100_T RM3100[4] = 
{
	[0]=		/* 使用硬件SPI驱动RM3100 */
	{
		.bSPIEnable								= true,
		.tSPI.tSPIHandle.Instance 				= SPI1,
		.tSPI.tSPIHandle.Init.Mode 				= SPI_MODE_MASTER,
		.tSPI.tSPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES,
		.tSPI.tSPIHandle.Init.DataSize 			= SPI_DATASIZE_8BIT,
		.tSPI.tSPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW,
		.tSPI.tSPIHandle.Init.CLKPhase 			= SPI_PHASE_1EDGE,
		.tSPI.tSPIHandle.Init.NSS 				= SPI_NSS_SOFT,
		.tSPI.tSPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64,
		.tSPI.tSPIHandle.Init.FirstBit 			= SPI_FIRSTBIT_MSB,
		.tSPI.tSPIHandle.Init.TIMode 			= SPI_TIMODE_DISABLE,
		.tSPI.tSPIHandle.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE,
		.tSPI.tSPIHandle.Init.CRCPolynomial 	= 10,	
#if defined (STM32L4_SGA_ENABLE)
		.tSPI.tSPIHandle.Init.CRCLength 		= SPI_CRC_LENGTH_DATASIZE,
		.tSPI.tSPIHandle.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE,	
#endif
		/**SPI1 GPIO Configuration
		PA5     ------> SPI1_SCK
		PA6     ------> SPI1_MISO
		PA7     ------> SPI1_MOSI
		PC5     ------> SPI1_NSS
		*/
		.tSPI.tGPIO[0].tGPIOInit.Pin	= GPIO_PIN_5,
		.tSPI.tGPIO[0].tGPIOInit.Mode 	= GPIO_MODE_AF_PP,
		.tSPI.tGPIO[0].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSPI.tGPIO[0].tGPIOPort		= GPIOA,
		.tSPI.tGPIO[0].ucAFMode			= NO_REMAP,

		.tSPI.tGPIO[1].tGPIOInit.Pin 	= GPIO_PIN_6,
		.tSPI.tGPIO[1].tGPIOInit.Mode 	= GPIO_MODE_AF_PP,
		.tSPI.tGPIO[1].tGPIOInit.Pull 	= GPIO_NOPULL,
		.tSPI.tGPIO[1].tGPIOPort		= GPIOA,
		.tSPI.tGPIO[1].ucAFMode			= NO_REMAP,

		.tSPI.tGPIO[2].tGPIOInit.Pin	= GPIO_PIN_7,
		.tSPI.tGPIO[2].tGPIOInit.Mode 	= GPIO_MODE_AF_PP,
		.tSPI.tGPIO[2].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSPI.tGPIO[2].tGPIOPort		= GPIOA,
		.tSPI.tGPIO[2].ucAFMode			= NO_REMAP,
		
		.tSPI.tGPIO[3].tGPIOInit.Pin	= GPIO_PIN_5,
		.tSPI.tGPIO[3].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
		.tSPI.tGPIO[3].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSPI.tGPIO[3].tGPIOPort		= GPIOC,
		.tSPI.tGPIO[3].ucAFMode			= NO_REMAP,
	
	},
	[1]=		/* 使用软件SPI驱动RM3100 */
	{
		/**SPI Soft GPIO Configuration
		PE2     ------> SPI_SCK
		PE4     ------> SPI_MISO
		PE3     ------> SPI_MOSI
		PE1     ------> SPI_NSS 
		*/
		.bSPISoftEnable							= true,
		.tSoftSPI.tSPISoft[0].tGPIOInit.Pin		= GPIO_PIN_2,
		.tSoftSPI.tSPISoft[0].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
		.tSoftSPI.tSPISoft[0].tGPIOInit.Pull 	= GPIO_PULLUP,
		.tSoftSPI.tSPISoft[0].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSoftSPI.tSPISoft[0].tGPIOPort			= GPIOE,
		.tSoftSPI.tSPISoft[0].ucAFMode			= NO_REMAP,
		
		.tSoftSPI.tSPISoft[1].tGPIOInit.Pin		= GPIO_PIN_4,
		.tSoftSPI.tSPISoft[1].tGPIOInit.Mode 	= GPIO_MODE_INPUT,
		.tSoftSPI.tSPISoft[1].tGPIOInit.Pull 	= GPIO_PULLUP,
		.tSoftSPI.tSPISoft[1].tGPIOPort			= GPIOE,
		.tSoftSPI.tSPISoft[1].ucAFMode			= NO_REMAP,
		
		.tSoftSPI.tSPISoft[2].tGPIOInit.Pin		= GPIO_PIN_3,
		.tSoftSPI.tSPISoft[2].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
		.tSoftSPI.tSPISoft[2].tGPIOInit.Pull 	= GPIO_PULLUP,
		.tSoftSPI.tSPISoft[2].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSoftSPI.tSPISoft[2].tGPIOPort			= GPIOE,
		.tSoftSPI.tSPISoft[2].ucAFMode			= NO_REMAP,
		
		.tSoftSPI.tSPISoft[3].tGPIOInit.Pin		= GPIO_PIN_1,
		.tSoftSPI.tSPISoft[3].tGPIOInit.Mode 	= GPIO_MODE_OUTPUT_PP,
		.tSoftSPI.tSPISoft[3].tGPIOInit.Pull 	= GPIO_PULLUP,
		.tSoftSPI.tSPISoft[3].tGPIOInit.Speed 	= GPIO_SPEED_FREQ_HIGH,
		.tSoftSPI.tSPISoft[3].tGPIOPort			= GPIOE,
		.tSoftSPI.tSPISoft[3].ucAFMode			= NO_REMAP,
	},
};

/* MS5837示例 */
tagMS5837_T MS5837 = 
{
    /* 采样分辨率设置 */
	.setOSR = MS5837_OSR4096,

	/* SCL线 */
	.tIIC.tIICSoft[0].tGPIOInit.Pin 		= GPIO_PIN_4,				/* GPIO引脚 */
	.tIIC.tIICSoft[0].tGPIOInit.Mode 		= GPIO_MODE_OUTPUT_PP,		/* GPIO模式 */
	.tIIC.tIICSoft[0].tGPIOInit.Pull 		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[0].tGPIOInit.Speed 		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[0].tGPIOPort 			= GPIOC,					/* GPIO分组 */

	/* SDA线 */
	.tIIC.tIICSoft[1].tGPIOInit.Pin 		= GPIO_PIN_5,				/* GPIO引脚 */
	.tIIC.tIICSoft[1].tGPIOInit.Mode		= GPIO_MODE_INPUT,			/* GPIO模式 */
	.tIIC.tIICSoft[1].tGPIOInit.Pull		= GPIO_NOPULL,				/* GPIO上下拉设置，是否需要上下拉看硬件 */
	.tIIC.tIICSoft[1].tGPIOInit.Speed		= GPIO_SPEED_FREQ_HIGH,		/* GPIO速度 */	
	.tIIC.tIICSoft[1].tGPIOPort 			= GPIOC,					/* GPIO分组 */
};

/* PID示例 */
tagPID_T PID = 
{
	.fKp = 0.8f,
	.fKi = 0.25,
	.fKd = 0.01,
};

